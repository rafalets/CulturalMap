import{a as h}from"./chunk-BA3KT2MW.js";import{a as S}from"./chunk-JH4RD366.js";import{A as I,D as x,I as O,M as k,N as y,c as M,d as C}from"./chunk-7Y6S2GNA.js";import{c as N}from"./chunk-IJBTA53P.js";import{a as b}from"./chunk-J5MXC6AL.js";import{b as m}from"./chunk-HHDFN2GK.js";import{f}from"./chunk-VTHXE323.js";var P=a=>{if(!a)return[0,0,0,0];let{r:e,g:r,b:s,a:i}=a;return[e,r,s,255*i]},v=class a{static findApplicableOverrides(e,r,s){if(e&&r){if(e.primitiveName){let i=!1;for(let t of s)if(t.primitiveName===e.primitiveName){i=!0;break}if(!i)for(let t of r)t.primitiveName===e.primitiveName&&s.push(t)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(let i of e.effects)a.findApplicableOverrides(i,r,s);if(e.symbolLayers)for(let i of e.symbolLayers)a.findApplicableOverrides(i,r,s);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(let i of e.effects)a.findApplicableOverrides(i,r,s);if(e.markerPlacement&&a.findApplicableOverrides(e.markerPlacement,r,s),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(let i of e.markerGraphics)a.findApplicableOverrides(i,r,s),a.findApplicableOverrides(i.symbol,r,s)}else e.type==="CIMCharacterMarker"?a.findApplicableOverrides(e.symbol,r,s):e.type==="CIMHatchFill"?a.findApplicableOverrides(e.lineSymbol,r,s):e.type==="CIMPictureMarker"&&a.findApplicableOverrides(e.animatedSymbolProperties,r,s)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&O(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};let s=y(e),i=e.primitiveName,t=[];for(let c of r)c.primitiveName===i&&t.push(y(c));return{type:"cim-effect-param",effect:s,overrides:k(t)}}static resolveSymbolOverrides(e,r,s,i,t,c,o){return f(this,null,function*(){if(!e?.symbol)return null;let{symbol:l,primitiveOverrides:n}=e,d=!!n;if(!d&&!i)return l;l=m(l),n=m(n);let u=!0;if(r||(r={attributes:{}},u=!1),d){if(u||(n=n.filter(p=>!p.valueExpressionInfo?.expression.includes("$feature"))),o||(n=n.filter(p=>!p.valueExpressionInfo?.expression.includes("$view"))),n.length>0){let p={spatialReference:s,fields:I(r.attributes),geometryType:t};yield a.createRenderExpressions(n,p),a.evaluateOverrides(n,r,t??"esriGeometryPoint",c,o)}a.applyOverrides(l,n)}return i&&a.applyDictionaryTextOverrides(l,r,i,null),l})}static createRenderExpressions(e,r){return f(this,null,function*(){let s=[];for(let i of e){let t=i.valueExpressionInfo;if(!t||a._expressionToRenderExpression.has(t.expression))continue;let c=N(t.expression,r.spatialReference,r.fields);s.push(c),c.then(o=>a._expressionToRenderExpression.set(t.expression,o))}s.length>0&&(yield Promise.all(s))})}static evaluateOverrides(e,r,s,i,t){let c={$view:{scale:t?.scale}};for(let o of e){o.value&&typeof o.value=="object"&&S(o.value)&&(o.propertyName==="Color"||o.propertyName==="StrokeColor")&&(o.value=P(o.value));let l=o.valueExpressionInfo;if(!l)continue;let n=a._expressionToRenderExpression.get(l.expression);n&&(o.value=h(n,r,c,s,i))}}static applyDictionaryTextOverrides(e,r,s,i,t="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{let c=e.symbolLayers;if(!c)return;for(let o of c)o&&o.type==="CIMVectorMarker"&&a.applyDictionaryTextOverrides(o,r,s,i,e.type==="CIMTextSymbol"?e.textCase:t)}break;case"CIMVectorMarker":{let c=e.markerGraphics;if(!c)return;for(let o of c)o&&a.applyDictionaryTextOverrides(o,r,s,i)}break;case"CIMMarkerGraphic":{let c=e.textString;if(c&&c.includes("[")){let o=M(c,s);e.textString=C(r,o,i,t)}}}}static applyOverrides(e,r,s,i){if(e.primitiveName){for(let t of r)if(t.primitiveName===e.primitiveName){let c=x(t.propertyName);if(i&&i.push({cim:e,nocapPropertyName:c,value:e[c]}),s){let o=!1;for(let l of s)l.primitiveName===e.primitiveName&&(o=!0);o||s.push(t)}t.value!=null&&(e[c]=t.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(let t of e.effects)a.applyOverrides(t,r,s,i);if(e.symbolLayers)for(let t of e.symbolLayers)a.applyOverrides(t,r,s,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(let t of e.effects)a.applyOverrides(t,r,s,i);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(let t of e.markerGraphics)a.applyOverrides(t,r,s,i),a.applyOverrides(t.symbol,r,s,i)}}static restoreOverrides(e){for(let r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(let s of e)s.value!==void 0&&(r+=`${s.primitiveName}${s.propertyName}${JSON.stringify(s.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(s=>Number(s));if(e==="Color"){let s=new b(r).toRgba();return s[3]*=255,s}return r}};v._expressionToRenderExpression=new Map;export{v as a};
