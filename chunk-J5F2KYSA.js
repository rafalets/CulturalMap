import{c as j}from"./chunk-CCGZQUKC.js";import{e as E}from"./chunk-WTJO2NGM.js";import{a as z}from"./chunk-NOQEJXLK.js";import{j as g}from"./chunk-QXXXCEV5.js";import{o as I}from"./chunk-5WKDXHVH.js";import{a as w}from"./chunk-HX2BGUTP.js";import{e as M}from"./chunk-K27GONOJ.js";import{a as c,f as P,i as b}from"./chunk-OLOKUDVI.js";import{h as x,r as G}from"./chunk-IB2IUO7T.js";import{a as D}from"./chunk-NHSDW26F.js";import{a as v,g as C}from"./chunk-LB5YQINJ.js";import{a as S}from"./chunk-VACZNAP3.js";import{L as _,d as a}from"./chunk-C7INQGWT.js";import{H as f}from"./chunk-WMHJC7XF.js";import{a as l}from"./chunk-QGVBCWUY.js";function H(t){let o=0,i=0,e=0;return t?(t.type==="cim"&&t.data.symbol&&"symbolLayers"in t.data.symbol&&t.data.symbol.symbolLayers&&t.data.symbol.symbolLayers.map(s=>{s.type==="CIMVectorMarker"&&s.anchorPoint&&(Math.abs(s.anchorPoint.x)>o&&(o=s.anchorPoint.x),Math.abs(s.anchorPoint.y)>i&&(i=s.anchorPoint.y),s.size!=null&&s.size>e&&(e=s.size))}),o=c(o),i=c(i),e=c(e),{offsetX:o,offsetY:i,size:e}):{offsetX:o,offsetY:i,size:e}}var r=class extends _{set graphic(t){this._circleCollisionCache=null,this._originalSymbol=t.symbol,this._set("graphic",t),this.attachSymbolChanged()}get elevationInfo(){let{layer:t}=this.graphic,o=t&&"elevationInfo"in t?t.elevationInfo:null,i=E(this.graphic),e=o?o.offset:0;return new w({mode:i,offset:e})}set focusedSymbol(t){t!==this._get("focusedSymbol")&&(this._set("focusedSymbol",t),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(t){t!==this._get("grabbing")&&(this._set("grabbing",t),this._updateGraphicSymbol())}set hovering(t){t!==this._get("hovering")&&(this._set("hovering",t),this._updateGraphicSymbol())}set selected(t){t!==this._get("selected")&&(this._set("selected",t),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:t?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}constructor(t){super(t),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.consumesClicks=!0,this.events=new S.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(t){let o=this.graphic;if(o.visible===!1)return null;let i=o.geometry;if(i==null)return null;let e=this._get("focusedSymbol"),s=e??o.symbol;return this.view.type==="2d"?this._intersectDistance2D(this.view,t,i,s):this._intersectDistance3D(this.view,t,o)}attach(){this.attachSymbolChanged(),this.layer!=null&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this.layer!=null&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=v(()=>this.graphic?.symbol,t=>{t!=null&&t!==this.focusedSymbol&&t!==this._originalSymbol&&(this._originalSymbol=t,this._focused&&this.focusedSymbol!=null&&(this.graphic.symbol=this.focusedSymbol))},C)}detachSymbolChanged(){this._graphicSymbolChangedHandle!=null&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}onElevationChange(){}onViewChange(){}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&this.focusedSymbol!=null?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(t,o,i,e){if((e=e||M(i))==null)return null;let s=1,h=this._circleCollisionCache;if(i.type==="point"&&e.type==="cim"&&e.data.symbol?.type==="CIMPointSymbol"&&e.data.symbol.symbolLayers){let{offsetX:p,offsetY:n,size:m}=H(e),u=b(o,O),y=m/2,d=t.toScreen(i),k=d.x+p,R=d.y+n;return g(u,[k,R])<y*y?s:null}if(i.type!=="point"||e.type!=="simple-marker")return j(o,i,t)?s:null;if(h==null||!h.originalPoint.equals(i)){let p=i,n=t.spatialReference;if(G(p.spatialReference,n)){let m=x(p,n);h={originalPoint:p.clone(),mapPoint:m,radiusPx:c(e.size)},this._circleCollisionCache=h}}if(h!=null){let p=b(o,O),n=t.toScreen?.(h.mapPoint);if(!n)return null;let m=h.radiusPx,u=n.x+c(e.xoffset),y=n.y-c(e.yoffset);return g(p,[u,y])<m*m?s:null}return null}_intersectDistance3D(t,o,i){let e=t.toMap(o,{include:[i]});return e&&z(e,L,t.renderSpatialReference)?I(L,t.state.camera.eye):null}};l([a({constructOnly:!0,nonNullable:!0})],r.prototype,"graphic",null),l([a()],r.prototype,"elevationInfo",null),l([a({constructOnly:!0,nonNullable:!0})],r.prototype,"view",void 0),l([a({value:null})],r.prototype,"focusedSymbol",null),l([a({constructOnly:!0})],r.prototype,"layer",void 0),l([a()],r.prototype,"interactive",void 0),l([a()],r.prototype,"selectable",void 0),l([a()],r.prototype,"grabbable",void 0),l([a({value:!1})],r.prototype,"grabbing",null),l([a()],r.prototype,"dragging",void 0),l([a()],r.prototype,"hovering",null),l([a({value:!1})],r.prototype,"selected",null),l([a()],r.prototype,"cursor",void 0),r=l([f("esri.views.interactive.GraphicManipulator")],r);var L=D(),O=P();export{H as a,r as b};
