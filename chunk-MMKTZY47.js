import{b as h}from"./chunk-2ILDS6SI.js";import"./chunk-FVILOOND.js";import{f as w}from"./chunk-LNVVFNTC.js";import"./chunk-VDADRLEF.js";import"./chunk-XPRVY6JT.js";import"./chunk-7N3ZKWML.js";import"./chunk-E62WHYYG.js";import"./chunk-QDTU3MWT.js";import"./chunk-BCREO4Q5.js";import"./chunk-3SDSCSDJ.js";import"./chunk-I4M2OT5W.js";import{n as p}from"./chunk-NTVLK3P2.js";import"./chunk-WMQNRNIU.js";import"./chunk-HD52PWPC.js";import"./chunk-EIPVFA6F.js";import"./chunk-VOFKUGRY.js";import"./chunk-IG66NQHW.js";import"./chunk-ARRCN5K3.js";import"./chunk-IXCTZWTQ.js";import"./chunk-6PN3I333.js";import"./chunk-ZTJLFKGG.js";import"./chunk-5TW726OD.js";import"./chunk-VGD3XLDH.js";import"./chunk-F7VRLFCB.js";import"./chunk-7IPIJKWU.js";import"./chunk-7R33MKVL.js";import"./chunk-ISSJ3A6Y.js";import"./chunk-VDKRSX77.js";import"./chunk-WUA6PW3I.js";import"./chunk-E57FTRWF.js";import"./chunk-U4J5SECU.js";import"./chunk-7EG726PT.js";import"./chunk-C7INQGWT.js";import"./chunk-WMHJC7XF.js";import"./chunk-NJEWDTYF.js";import"./chunk-N3SDOFND.js";import"./chunk-OVHPPCBL.js";import"./chunk-FNXQZPHT.js";import"./chunk-3TQOUBNU.js";import"./chunk-D2LVMNOU.js";import"./chunk-SNFOAZZQ.js";import"./chunk-QGVBCWUY.js";import"./chunk-HHDFN2GK.js";import"./chunk-47GHT6OF.js";import{a as f,b as l,f as i}from"./chunk-VTHXE323.js";function a(e){return Array.isArray(e)?e[0]?.spatialReference:e?.spatialReference}function m(e){return e&&(Array.isArray(e)?e.map(m):e.toJSON?e.toJSON():e)}function s(e){return Array.isArray(e)?e.map(t=>w(t)):w(e)}function A(e,t){let n;return Array.isArray(e)?n=e:(n=[],n.push(e),t!=null&&n.push(t)),n}var d;function S(){return i(this,null,function*(){return d||(d=h("geometryEngineWorker",{strategy:"distributed"})),d})}function r(e,t){return i(this,null,function*(){return(yield S()).invoke("executeGEOperation",{operation:e,parameters:m(t)})})}function x(e,t){return i(this,null,function*(){let n=yield S();return Promise.all(n.broadcast("executeGEOperation",{operation:e,parameters:m(t)}))})}function D(e){return r("extendedSpatialReferenceInfo",[e])}function L(e,t){return i(this,null,function*(){return s(yield r("clip",[a(e),e,t]))})}function T(e,t){return i(this,null,function*(){return s(yield r("cut",[a(e),e,t]))})}function V(e,t){return r("contains",[a(e),e,t])}function v(e,t){return r("crosses",[a(e),e,t])}function E(e,t,n){return r("distance",[a(e),e,t,n])}function b(e,t){return r("equals",[a(e),e,t])}function z(e,t){return r("intersects",[a(e),e,t])}function H(e,t){return r("touches",[a(e),e,t])}function I(e,t){return r("within",[a(e),e,t])}function P(e,t){return r("disjoint",[a(e),e,t])}function j(e,t){return r("overlaps",[a(e),e,t])}function k(e,t,n){return r("relate",[a(e),e,t,n])}function q(e){return r("isSimple",[a(e),e])}function B(e){return i(this,null,function*(){return s(yield r("simplify",[a(e),e]))})}function C(e,t=!1){return i(this,null,function*(){return s(yield r("convexHull",[a(e),e,t]))})}function G(e,t){return i(this,null,function*(){return s(yield r("difference",[a(e),e,t]))})}function W(e,t){return i(this,null,function*(){return s(yield r("symmetricDifference",[a(e),e,t]))})}function F(e,t){return i(this,null,function*(){return s(yield r("intersect",[a(e),e,t]))})}function K(e,t=null){return i(this,null,function*(){let n=A(e,t);return s(yield r("union",[a(n),n]))})}function M(e,t,n,c,o,y){return i(this,null,function*(){return s(yield r("offset",[a(e),e,t,n,c,o,y]))})}function Q(e,t,n,c=!1){return i(this,null,function*(){let o=[a(e),e,t,n,c];return s(yield r("buffer",o))})}function U(e,t,n,c,o,y){return i(this,null,function*(){let R=[a(e),e,t,n,c,o,y];return s(yield r("geodesicBuffer",R))})}function X(e,t,n=!0){return i(this,null,function*(){let c=yield r("nearestCoordinate",[a(e),e,t,n]);return l(f({},c),{coordinate:p.fromJSON(c.coordinate)})})}function Y(e,t){return i(this,null,function*(){let n=yield r("nearestVertex",[a(e),e,t]);return l(f({},n),{coordinate:p.fromJSON(n.coordinate)})})}function _(e,t,n,c){return i(this,null,function*(){return(yield r("nearestVertices",[a(e),e,t,n,c])).map(o=>l(f({},o),{coordinate:p.fromJSON(o.coordinate)}))})}function g(e){return"xmin"in e?e.center:"x"in e?e:e.extent?.center}function $(e,t,n){return i(this,null,function*(){if(e==null)throw new u;let c=e.spatialReference;if((n=n??g(e))==null)throw new u;let o=e.constructor.fromJSON(yield r("rotate",[c,e,t,n]));return o.spatialReference=c,o})}function Z(e,t){return i(this,null,function*(){if(e==null)throw new u;let n=e.spatialReference;if((t=t??g(e))==null)throw new u;let c=e.constructor.fromJSON(yield r("flipHorizontal",[n,e,t]));return c.spatialReference=n,c})}function ee(e,t){return i(this,null,function*(){if(e==null)throw new u;let n=e.spatialReference;if((t=t??g(e))==null)throw new u;let c=e.constructor.fromJSON(yield r("flipVertical",[n,e,t]));return c.spatialReference=n,c})}function te(e,t,n,c){return i(this,null,function*(){return s(yield r("generalize",[a(e),e,t,n,c]))})}function ne(e,t,n){return i(this,null,function*(){return s(yield r("densify",[a(e),e,t,n]))})}function re(e,t,n,c=0){return i(this,null,function*(){return s(yield r("geodesicDensify",[a(e),e,t,n,c]))})}function ae(e,t){return r("planarArea",[a(e),e,t])}function ie(e,t){return r("planarLength",[a(e),e,t])}function ce(e,t,n){return r("geodesicArea",[a(e),e,t,n])}function se(e,t,n){return r("geodesicLength",[a(e),e,t,n])}function oe(e,t){return i(this,null,function*(){return s(yield r("intersectLinesToPoints",[a(e),e,t]))})}function ue(e,t){return i(this,null,function*(){yield x("changeDefaultSpatialReferenceTolerance",[e,t])})}function fe(e){return i(this,null,function*(){yield x("clearDefaultSpatialReferenceTolerance",[e])})}var u=class extends Error{constructor(){super("Illegal Argument Exception")}};export{Q as buffer,ue as changeDefaultSpatialReferenceTolerance,fe as clearDefaultSpatialReferenceTolerance,L as clip,V as contains,C as convexHull,v as crosses,T as cut,ne as densify,G as difference,P as disjoint,E as distance,b as equals,D as extendedSpatialReferenceInfo,Z as flipHorizontal,ee as flipVertical,te as generalize,ce as geodesicArea,U as geodesicBuffer,re as geodesicDensify,se as geodesicLength,F as intersect,oe as intersectLinesToPoints,z as intersects,q as isSimple,X as nearestCoordinate,Y as nearestVertex,_ as nearestVertices,M as offset,j as overlaps,ae as planarArea,ie as planarLength,k as relate,$ as rotate,B as simplify,W as symmetricDifference,H as touches,K as union,I as within};
